{"version":3,"sources":["serviceWorker.ts","i18n.ts","components/CategoryDisplay/CategoryDisplay.tsx","utils.tsx","components/NotFound/NotFound.tsx","components/ConversionDisplay/ConversionDisplay.tsx","components/Footer/Footer.tsx","components/Header/Header.tsx","components/App/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","resources","en","translation","es","i18n","use","initReactI18next","init","lng","keySeparator","interpolation","escapeValue","ConversionCard","props","t","useTranslation","history","useHistory","Col","Card","className","Title","src","icon_url","alt","category","Body","Button","variant","onClick","push","navigate_to","ConversionRow","Row","xs","sm","md","lg","columns","map","conversion","key","icon","slug","CategoryDisplay","conversions","conversionData","sort","a","b","chunks","input","chunk_size","results","length","splice","chunkArray","chunk","idx","NotFound","ConversionDisplay","detail","id","filter","con","ConversionDetail","params","useState","units","resourceName","sourceUnit","setSourceUnit","unit","targetUnit","setTargetUnit","amount","setAmount","undefined","conversionResult","setConversionResult","useEffect","result","source","tarrget","valueToConvert","success","Number","isNaN","parseFloat","formulaInvert","offset","multiplier","convert","InputGroup","Prepend","Text","FormControl","onChange","e","currentTarget","value","inputMode","aria-label","aria-describedby","Form","Control","as","custom","defaultValue","Footer","changeLanguage","target","rel","href","language","Header","useLocation","showHeader","setShowHeader","pathname","width","height","App","Container","path","render","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.76bc6426.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\nimport translationEN from './translations/en-GB.json';\nimport translationES from './translations/es-ES.json';\n\n// the translations\nconst resources = {\n  en: {\n    translation: translationEN\n  },\n  es: {\n    translation: translationES\n  },\n};\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    lng: \"en\",\n\n    keySeparator: false, // we do not use keys in form messages.welcome\n\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    },\n  });\n\nexport default i18n;\n","import React from \"react\";\nimport { Button, Card, Col, Row } from \"react-bootstrap\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\nimport conversionData from \"../../data/conversions_v2.json\";\nimport Conversion from \"../../types/Conversion\";\nimport { chunkArray } from \"../../utils\";\n\n/* Some sizes to break the grid on */\nconst xs_size: number = 2;\nconst sm_size: number = 2;\nconst md_size: number = 2;\nconst lg_size: number = 4;\n\nconst ConversionCard = (props: {\n  category: string;\n  icon_url: string;\n  navigate_to: string;\n}) => {\n  const { t } = useTranslation();\n  let history = useHistory();\n\n  function handleClick() {\n    history.push(props.navigate_to);\n  }\n\n  return (\n    <Col>\n      <Card className=\"mb-3\">\n        {/* <Card.Img variant=\"top\" src={props.icon_url} /> */}\n        <Card.Title className=\"text-center mb-0 mt-1\">\n          <img src={props.icon_url} alt={t(props.category)} />\n        </Card.Title>\n        <Card.Body className=\"text-center\">\n          <Button\n            className=\"stretched-link\"\n            variant=\"success\"\n            onClick={handleClick}\n          >\n            {t(props.category)}\n          </Button>\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n};\n\nconst ConversionRow = (props: { columns: Conversion[] }) => {\n  return (\n    <Row xs={xs_size} sm={sm_size} md={md_size} lg={lg_size}>\n      {props.columns.map((conversion) => (\n        <ConversionCard\n          key={conversion.category}\n          category={conversion.category}\n          icon_url={conversion.icon}\n          navigate_to={conversion.slug}\n        />\n      ))}\n    </Row>\n  );\n};\n\nconst CategoryDisplay = () => {\n  // Load the arary from the local json conversions file.\n  const conversions: Conversion[] = [...conversionData];\n  conversions.sort((a, b) => {\n    return a.sort - b.sort;\n  });\n  const chunks: Conversion[][] = chunkArray(conversions, lg_size);\n\n  return (\n    <>\n      {chunks.map((chunk, idx) => (\n        <ConversionRow key={idx} columns={chunk} />\n      ))}\n    </>\n  );\n};\n\nexport default CategoryDisplay;\n","import Conversion, { ConversionResult } from \"./types/Conversion\";\n\nexport function chunkArray(input: Conversion[], chunk_size: number) {\n  var results = [];\n\n  while (input.length) {\n    results.push(input.splice(0, chunk_size));\n  }\n\n  return results;\n}\n\nexport function convert(source: string, tarrget: string, detail: Conversion, valueToConvert: string) : ConversionResult {\n  const sourceUnit = detail.units.filter((unit) => unit.resourceName === source);\n  const targetUnit = detail.units.filter((unit) => unit.resourceName === tarrget);\n\n  if (sourceUnit.length === 0)\n  {\n    return {\n      success: false,\n      result: undefined,\n    };\n  }\n\n  if (targetUnit.length === 0)\n  {\n    return {\n      success: false,\n      result: undefined,\n    };\n  }\n\n  if (Number.isNaN(valueToConvert))\n  {\n    return {\n      success: false,\n      result: undefined,\n    };\n  }\n\n  const amount: number = Number.parseFloat(valueToConvert);\n\n  if (source === tarrget) {\n    return {\n      success: true,\n      result: amount,\n    };\n  }\n\n  let result : number = 0.0;\n\n  if (sourceUnit[0].formulaInvert)\n  {\n      result = (amount - sourceUnit[0].offset) * sourceUnit[0].multiplier;\n  }\n  else\n  {\n      result = amount * sourceUnit[0].multiplier + sourceUnit[0].offset;\n  }\n\n  // Convert to the target unit\n  if (targetUnit[0].formulaInvert)\n  {\n      result = result / targetUnit[0].multiplier + targetUnit[0].offset;\n  }\n  else\n  {\n      result = (result - targetUnit[0].offset) / targetUnit[0].multiplier;\n  }  \n\n  return {\n    success: true,\n    result: result,\n  };\n}","import React from \"react\";\n\nconst NotFound = () => {\n  return (\n    <>\n      <div>404 Page Not Found</div>\n    </>\n  );\n};\n\nexport default NotFound;\n","import React, { useEffect, useState } from \"react\";\nimport { Col, Form, FormControl, InputGroup, Row } from \"react-bootstrap\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useTranslation } from \"react-i18next\";\nimport conversionData from \"../../data/conversions_v2.json\";\nimport Conversion from \"../../types/Conversion\";\nimport { convert } from \"../../utils\";\nimport NotFound from \"../NotFound/NotFound\";\n\nconst ConversionDetail = (id: string) => {\n  const conversions: Conversion[] = [...conversionData];\n  const conversion: Conversion[] = conversions.filter((con) => con.slug === id);\n\n  if (conversion.length === 0) {\n    return null;\n  }\n\n  return conversion[0];\n};\n\nconst ConversionDisplay = (props: any) => {\n  const { t } = useTranslation();\n\n  const { match } = props;\n  const detail = ConversionDetail(match.params.id);\n\n  // Default the \"from\" to the first element.\n  const [sourceUnit, setSourceUnit] = useState<string>(detail?.units[0].resourceName ?? \"\");\n  // Default the \"to\" to the first element that is not the \"from\" element. Assumes we always have 2=>\n  const [targetUnit, setTargetUnit] = useState<string>(detail?.units.filter((unit) => unit.resourceName !== sourceUnit)[0].resourceName ?? \"\");\n  // Keep the amount as a string and deal with it later.\n  const [amount, setAmount] = useState<string>('');\n  // Track the current result.\n  const [conversionResult, setConversionResult] = useState<number | undefined>(undefined);\n\n  useEffect(() => {\n      let result = convert(sourceUnit, targetUnit, detail!!!, amount);\n      if (result.success) {\n        setConversionResult(result.result!!!);\n      } else {\n        setConversionResult(undefined);\n      }\n\n  }, [sourceUnit, targetUnit, amount, detail])\n  \n  if (detail === null || detail.units.length <= 1) {\n    return (\n      <>\n        <Helmet>\n          <title>404 - {t(\"App_Title\")}</title>\n        </Helmet>\n        <NotFound />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          {t(detail.category)} - {t(\"App_Title\")}\n        </title>\n      </Helmet>\n      <Row>\n        <Col className=\"text-center\">\n        <h3>{t(`${detail.category}_Header`)}</h3>\n        </Col>\n      </Row>            \n      <Row xs=\"1\" sm=\"1\" md=\"3\" lg=\"3\">\n        <Col>\n          <InputGroup className=\"mb-3\">\n            <InputGroup.Prepend>\n              <InputGroup.Text id=\"inputGroup-sizing-default\">{t(\"Convert_Value\")}</InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              onChange={(e) => setAmount(e.currentTarget.value)}\n              inputMode=\"decimal\"\n              aria-label=\"Default\"\n              aria-describedby=\"inputGroup-sizing-default\"\n            />\n          </InputGroup>\n        </Col>\n        <Col>\n          <InputGroup className=\"mb-3\">\n            <InputGroup.Prepend>\n              <InputGroup.Text id=\"inputGroup-sizing-default\">{t(\"Convert_From\")}</InputGroup.Text>\n            </InputGroup.Prepend>\n            <Form.Control as=\"select\" custom defaultValue={sourceUnit} onChange={(e) => setSourceUnit(e.currentTarget.value)}>\n              {detail.units.map((unit) => (\n                <option key={unit.resourceName} value={unit.resourceName}>{t(unit.resourceName)}</option>\n              ))}\n            </Form.Control>\n          </InputGroup>\n        </Col>\n        <Col>\n          <InputGroup className=\"mb-3\">\n            <InputGroup.Prepend>\n              <InputGroup.Text id=\"inputGroup-sizing-default\">{t(\"Convert_To\")}</InputGroup.Text>\n            </InputGroup.Prepend>\n            <Form.Control as=\"select\" custom defaultValue={targetUnit} onChange={(e) => setTargetUnit(e.currentTarget.value)}>\n                {detail.units.map((unit) => (\n                  <option key={unit.resourceName} value={unit.resourceName}>{t(unit.resourceName)}</option>\n                ))}\n            </Form.Control>\n          </InputGroup>\n        </Col>\n      </Row>\n      <Row>\n        <Col className=\"text-center\">\n          <h4>{t(\"Convert_Result\")}:{\" \"}{conversionResult ? conversionResult : ''}</h4>\n        </Col>\n      </Row>        \n    </>\n  );\n};\n\nexport default ConversionDisplay;\n","import React from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport { useTranslation } from \"react-i18next\";\n\nconst Footer = () => {\n    const { t, i18n } = useTranslation();\n    const changeLanguage = (lng: string) => {\n        i18n.changeLanguage(lng);\n    }\n\n    return (\n    <footer className=\"pt-5 text-muted text-center text-small\">\n        <p className=\"mb-1\">icons by <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://icons8.com\">Icons8</a>, source code on <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/anuradha-lakruwan/unit-conversion-web-app\">GitHub</a></p>\n        <p>\n            {i18n.language === \"es\" ?\n            <Button onClick={() => changeLanguage(\"en\")}variant=\"link\">{t(\"Lang_English\")}</Button>\n            :  <Button onClick={() => changeLanguage(\"es\")} variant=\"link\">{t(\"Lang_Spanish\")}</Button>}          \n        </p>\n    </footer>\n    );\n};\n\nexport default Footer;\n\n","import React, { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory, useLocation } from \"react-router-dom\";\n\nconst Header = () => {\n  const { t } = useTranslation();\n  const location = useLocation();\n  const [showHeader, setShowHeader] = useState<boolean>(true);\n\n  let history = useHistory();\n\n  function handleClick() {        \n    if (location.pathname !== \"/\") {\n      history.push(\"/\");\n    }    \n  }\n  \n  useEffect(() => {\n    setShowHeader(location.pathname === \"/\");\n  }, [location.pathname]);\n\n  return (\n    <div className=\"text-center\">\n      <button className=\"btn btn-default\" onClick={handleClick}>\n        <img\n          className=\"d-block mx-auto mb-4\"\n          src=\"/unit-conversion-web-app/android-chrome-192x192.png\"\n          alt=\"\"\n          width=\"72\"\n          height=\"72\"\n        />\n      </button>\n      {showHeader ?\n      <><h2>{t(\"App_Title\")}</h2>\n      <p className=\"lead\">{t(\"App_SubTitle\")}</p></>\n      : <></>}\n    </div>\n  );\n};\n\nexport default Header;\n\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useTranslation } from \"react-i18next\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport CategoryDisplay from \"../CategoryDisplay/CategoryDisplay\";\nimport ConversionDisplay from \"../ConversionDisplay/ConversionDisplay\";\nimport Footer from \"../Footer/Footer\";\nimport Header from \"../Header/Header\";\n\n\nconst App = () => {\n  const { t } = useTranslation();\n  \n  return (\n    <Container className=\"p-3\">\n      <Helmet>\n        <title>{t(\"App_Title\")}</title>\n      </Helmet>\n      <Router>\n        <Header />\n        <Switch>\n          <Route\n            path=\"/:id\"\n            render={(props) => {\n              return <ConversionDisplay {...props} />;\n            }}\n          />\n          <Route path=\"/\">\n            <CategoryDisplay />\n          </Route>\n        </Switch>\n        <Footer />\n      </Router>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./i18n\";\nimport App from \"./components/App/App\";\nimport { HelmetProvider } from \"react-helmet-async\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HelmetProvider>\n      <App />\n    </HelmetProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}